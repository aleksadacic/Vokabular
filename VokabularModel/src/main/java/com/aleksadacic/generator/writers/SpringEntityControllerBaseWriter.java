package com.aleksadacic.generator.writers;

import com.aleksadacic.creator.turbo.reader.ModelObject;
import com.aleksadacic.engine.dataimport.ImportDTO;
import com.aleksadacic.engine.dataimport.ImportProcedure;
import com.aleksadacic.engine.framework.service.EntityController;
import com.aleksadacic.engine.validations.Validation;
import com.aleksadacic.generator.utils.AbstractWriter;
import com.aleksadacic.generator.utils.WriterUtils;

import java.util.logging.Level;
import java.util.logging.Logger;

public class SpringEntityControllerBaseWriter extends AbstractWriter {

    public SpringEntityControllerBaseWriter(ModelObject modelObject, String classPackage) {
        super(modelObject, classPackage);
    }

    @Override
    public void writeClassHeader() {
        addImport(EntityController.class);
        addImport(WriterUtils.createPackage(WriterUtils.BUSINESS_PACKAGE, modelObject.getName().toLowerCase(), modelObject.getName()));
        append(0, "abstract class " + modelObject.getName() + "ControllerBase implements EntityController<" + modelObject.getName() + "DTO, " + modelObject.getName() + "SearchDTO" + "> {");
    }

    @Override
    public void writeClassContent() {
        addImport("com.aleksadacic.engine.datatypes.Id");
        addImport("com.aleksadacic.engine.exceptions.BadParametersException");
        addImport("com.aleksadacic.engine.exceptions.DataNotFoundException");
        addImport("com.aleksadacic.engine.exceptions.ServiceException");
        addImport("com.aleksadacic.engine.framework.service.ServiceUtils");
        addImport(WriterUtils.BUSINESS_PACKAGE + "." + modelObject.getName().toLowerCase() + "." + modelObject.getName() + "Manager");
        addImport(WriterUtils.IMPORTER_PACKAGE + "." + modelObject.getName().toLowerCase() + "." + modelObject.getName() + "Importer");
        addImport("com.aleksadacic.vokabular.business.entities." + modelObject.getName().toLowerCase() + "." + modelObject.getName() + "Specification");
        addImport("jakarta.validation.constraints.NotNull");
        addImport("org.springframework.beans.factory.annotation.Autowired");
        addImport("org.springframework.data.domain.Sort");
        addImport("org.springframework.http.ResponseEntity");
        addImport("java.util.Optional");
        addImport(Validation.class);
        addImport(Logger.class);
        addImport(Level.class);
        append(1, "private static final Logger logger = Logger.getLogger(" + modelObject.getName() + "ControllerBase.class.getSimpleName());");
        appendBlankLine();
        append(1, "@Autowired");
        append(1, "protected " + modelObject.getName() + "Manager manager;");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> create() {");
        append(2, "try {");
        append(3, "return ResponseEntity.ok(manager.create());");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> insert(" + modelObject.getName() + "DTO request) {");
        append(2, "try {");
        append(3, "" + modelObject.getName() + " entity = request.toBusinessEntity();");
        append(3, "if (entity == null) {");
        append(4, "throw new BadParametersException();");
        append(3, "}");
        append(3, "Validation.validate(request);");
        append(3, "return ResponseEntity.ok(manager.insert(entity));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> update(" + modelObject.getName() + "DTO request) {");
        append(2, "try {");
        append(3, "" + modelObject.getName() + " entity = request.toBusinessEntity();");
        append(3, "if (entity == null) {");
        append(4, "throw new ServiceException();");
        append(3, "}");
        append(3, "Validation.validate(request);");
        append(3, "return ResponseEntity.ok(manager.update(entity));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> delete(@NotNull String id) {");
        append(2, "try {");
        append(3, "Optional<" + modelObject.getName() + "> entity = manager.getById(Id.of(id));");
        append(3, "if (entity.isEmpty()) {");
        append(4, "throw new DataNotFoundException();");
        append(3, "}");
        append(3, "manager.delete(entity.get());");
        append(3, "return ResponseEntity.ok().build();");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> search(" + modelObject.getName() + "SearchDTO request) {");
        append(2, "try {");
        append(3, "if (request.getPageNumber() == null || request.getPageSize() == null) {");
        append(4, "throw new BadParametersException(\"pageNumber\", \"pageSize\");");
        append(3, "}");
        append(3, "" + modelObject.getName() + "Specification specification = request.buildSpecification();");
        append(3, "if (request.getSort() != null && !request.getSort().isEmpty()) {");
        append(4, "manager.setSort(Sort.by(request.getSort().toArray(new String[0])));");
        append(3, "}");
        append(3, "return ResponseEntity.ok(manager.getPageData(specification));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> getById(@NotNull String id) {");
        append(2, "try {");
        append(3, "return ResponseEntity.ok(manager.getById(Id.of(id)));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> count(" + modelObject.getName() + "SearchDTO request) {");
        append(2, "try {");
        append(3, "" + modelObject.getName() + "Specification specification = request.buildSpecification();");
        append(3, "return ResponseEntity.ok(manager.count(specification));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> getAll() {");
        append(2, "try {");
        append(3, "return ResponseEntity.ok(manager.getData());");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        append(1, "@Override");
        append(1, "public ResponseEntity<?> getData(" + modelObject.getName() + "SearchDTO request) {");
        append(2, "try {");
        append(3, "" + modelObject.getName() + "Specification specification = request.buildSpecification();");
        append(3, "if (request.getPageNumber() != null && request.getPageSize() != null) {");
        append(4, "manager.setPageable(request.getPageNumber(), request.getPageSize());");
        append(3, "}");
        append(3, "if (request.getSort() != null && !request.getSort().isEmpty()) {");
        append(4, "manager.setSort(Sort.by(request.getSort().toArray(new String[0])));");
        append(3, "}");
        append(3, "return ResponseEntity.ok(manager.getData(specification));");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        addImport(ImportDTO.class);
        addImport(ImportProcedure.class);
        append(1, "public ResponseEntity<?> importData(ImportDTO request) {");
        append(2, "try {");
        append(3, "logger.log(Level.INFO, \"importData: {0}\", request);");
        append(3, "Validation.validate(request);");
        append(3, "" + modelObject.getName() + "Importer importer = new " + modelObject.getName() + "Importer(manager, request.getFile().getInputStream());");
        append(3, "ImportProcedure procedure = ImportProcedure.of(request, importer);");
        append(3, "procedure.execute();");
        append(3, "logger.log(Level.INFO, \"importData: finished importing data.\");");
        append(3, "return ResponseEntity.ok(procedure.getReport().toJson());");
        append(2, "} catch (Exception e) {");
        append(3, "return ServiceUtils.errorResponse(e);");
        append(2, "}");
        append(1, "}");
        appendBlankLine();
        addImport("com.aleksadacic.vokabular.vokabulardataimport.export.ReportDocument");
        addImport("org.springframework.http.HttpHeaders");
        addImport("org.springframework.http.MediaType");
        append(1, "public ResponseEntity<byte[]> importDataWithReport(ImportDTO request) {");
        append(2, "try {");
        append(3, "logger.log(Level.INFO, \"importDataWithReport: {0}\", request);");
        append(3, "Validation.validate(request);");
        append(3, "" + modelObject.getName() + "Importer importer = new " + modelObject.getName() + "Importer(manager, request.getFile().getInputStream());");
        append(3, "ImportProcedure procedure = ImportProcedure.of(request, importer);");
        append(3, "procedure.execute();");
        append(3, "logger.log(Level.INFO, \"importDataWithReport: finished importing data.\");");
        append(3, "HttpHeaders headers = new HttpHeaders();");
        append(3, "headers.setContentType(MediaType.APPLICATION_PDF);");
        append(3, "headers.setContentDispositionFormData(\"report\", \"report.pdf\");");
        append(3, "byte[] data = ReportDocument.of(procedure.getReport());");
        append(3, "return ResponseEntity.ok().headers(headers).contentLength(data.length).body(data);");
        append(2, "} catch (Exception e) {");
        append(3, "e.printStackTrace();");
        append(3, "return ResponseEntity.badRequest().body(new byte[0]);");
        append(2, "}");
        append(1, "}");
        append(0, "}");
    }
}
